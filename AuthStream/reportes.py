import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from fpdf import FPDF
import io
import base64
from datetime import datetime
import tempfile
import os

class ReportePDF(FPDF):
    """Clase personalizada para generar reportes PDF"""
    
    def header(self):
        """Encabezado del PDF"""
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'Reporte de An√°lisis de Machine Learning', 0, 1, 'C')
        self.ln(5)
    
    def footer(self):
        """Pie de p√°gina del PDF"""
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page_no()}', 0, 0, 'C')
    
    def titulo_seccion(self, titulo):
        """Agregar t√≠tulo de secci√≥n"""
        self.ln(5)
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, titulo, 0, 1, 'L')
        self.ln(2)
    
    def subtitulo(self, subtitulo):
        """Agregar subt√≠tulo"""
        self.ln(2)
        self.set_font('Arial', 'B', 12)
        self.cell(0, 8, subtitulo, 0, 1, 'L')
        self.ln(1)
    
    def texto_normal(self, texto):
        """Agregar texto normal"""
        self.set_font('Arial', '', 10)
        self.multi_cell(0, 6, texto)
        self.ln(1)
    
    def tabla_metricas(self, titulo, datos):
        """Agregar tabla de m√©tricas"""
        self.subtitulo(titulo)
        
        # Ancho de columnas
        col_width = 90
        
        # Encabezados
        self.set_font('Arial', 'B', 10)
        self.cell(col_width, 7, 'M√©trica', 1, 0, 'C')
        self.cell(col_width, 7, 'Valor', 1, 1, 'C')
        
        # Datos
        self.set_font('Arial', '', 10)
        for metrica, valor in datos.items():
            if isinstance(valor, (int, float)):
                valor_str = f"{valor:.4f}" if isinstance(valor, float) else str(valor)
            else:
                valor_str = str(valor)
            
            self.cell(col_width, 6, metrica.replace('_', ' ').title(), 1, 0, 'L')
            self.cell(col_width, 6, valor_str, 1, 1, 'C')
        
        self.ln(5)

def generar_reporte_pdf(resultados_modelos):
    """Generar reporte PDF con los resultados de todos los modelos"""
    st.header("üìÑ Generaci√≥n de Reporte PDF")
    
    if not resultados_modelos:
        st.error("‚ùå No hay resultados de modelos disponibles")
        return
    
    # Informaci√≥n del reporte
    st.subheader("üìä Resumen de Resultados Disponibles")
    
    for tipo_modelo, resultados in resultados_modelos.items():
        with st.expander(f"üîç {tipo_modelo.replace('_', ' ').title()}"):
            if tipo_modelo == 'regresion':
                st.write("**Modelos de Regresi√≥n Entrenados:**")
                for modelo, metricas in resultados.items():
                    st.write(f"- {modelo}: R¬≤ = {metricas['r2']:.4f}")
            
            elif tipo_modelo == 'logistica':
                st.write("**Modelo Log√≠stico:**")
                st.write(f"- Exactitud: {resultados['accuracy']:.4f}")
                if 'auc' in resultados:
                    st.write(f"- AUC: {resultados['auc']:.4f}")
            
            elif 'arbol' in tipo_modelo:
                st.write(f"**√Årbol de Decisi√≥n - {tipo_modelo.split('_')[1].title()}:**")
                if 'accuracy' in resultados:
                    st.write(f"- Exactitud: {resultados['accuracy']:.4f}")
                elif 'r2' in resultados:
                    st.write(f"- R¬≤: {resultados['r2']:.4f}")
                st.write(f"- Profundidad: {resultados['depth']}")
                st.write(f"- N√∫mero de hojas: {resultados['n_leaves']}")
    
    # Configuraci√≥n del reporte
    st.subheader("‚öôÔ∏è Configuraci√≥n del Reporte")
    
    col1, col2 = st.columns(2)
    
    with col1:
        incluir_graficos = st.checkbox("üìà Incluir gr√°ficos", value=True)
        incluir_metricas = st.checkbox("üìä Incluir tablas de m√©tricas", value=True)
    
    with col2:
        incluir_interpretacion = st.checkbox("üí° Incluir interpretaciones", value=True)
        incluir_recomendaciones = st.checkbox("üéØ Incluir recomendaciones", value=True)
    
    # Informaci√≥n del usuario
    nombre_usuario = st.session_state.get('user_name', 'Usuario')
    email_usuario = st.session_state.get('user_email', 'No especificado')
    
    if st.button("üìÑ Generar Reporte PDF", type="primary"):
        try:
            # Crear PDF
            pdf = ReportePDF()
            pdf.add_page()
            
            # Informaci√≥n general
            pdf.titulo_seccion("INFORMACI√ìN GENERAL")
            pdf.texto_normal(f"Usuario: {nombre_usuario}")
            pdf.texto_normal(f"Email: {email_usuario}")
            pdf.texto_normal(f"Fecha de generaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            pdf.texto_normal(f"Total de tipos de modelos analizados: {len(resultados_modelos)}")
            
            # Procesar cada tipo de modelo
            for tipo_modelo, resultados in resultados_modelos.items():
                
                if tipo_modelo == 'regresion':
                    pdf.add_page()
                    pdf.titulo_seccion("MODELOS DE REGRESI√ìN")
                    
                    for modelo, metricas in resultados.items():
                        pdf.subtitulo(f"Modelo: {modelo}")
                        
                        if incluir_metricas:
                            datos_tabla = {
                                'R¬≤': metricas['r2'],
                                'MSE': metricas['mse'],
                                'RMSE': metricas['rmse'],
                                'MAE': metricas['mae']
                            }
                            pdf.tabla_metricas("M√©tricas de Rendimiento", datos_tabla)
                        
                        if incluir_interpretacion:
                            interpretacion = generar_interpretacion_regresion(metricas['r2'])
                            pdf.texto_normal(f"Interpretaci√≥n: {interpretacion}")
                
                elif tipo_modelo == 'logistica':
                    pdf.add_page()
                    pdf.titulo_seccion("MODELO LOG√çSTICO")
                    
                    if incluir_metricas:
                        datos_tabla = {
                            'Exactitud': resultados['accuracy'],
                            'Precisi√≥n': resultados['precision'],
                            'Recall': resultados['recall'],
                            'F1-Score': resultados['f1_score']
                        }
                        if 'auc' in resultados:
                            datos_tabla['AUC'] = resultados['auc']
                        
                        pdf.tabla_metricas("M√©tricas de Clasificaci√≥n", datos_tabla)
                    
                    if incluir_interpretacion:
                        interpretacion = generar_interpretacion_clasificacion(resultados['accuracy'])
                        pdf.texto_normal(f"Interpretaci√≥n: {interpretacion}")
                
                elif 'arbol' in tipo_modelo:
                    pdf.add_page()
                    tipo_arbol = tipo_modelo.split('_')[1].title()
                    pdf.titulo_seccion(f"√ÅRBOL DE DECISI√ìN - {tipo_arbol.upper()}")
                    
                    if incluir_metricas:
                        datos_tabla = {
                            'Profundidad': resultados['depth'],
                            'N√∫mero de hojas': resultados['n_leaves']
                        }
                        
                        if 'accuracy' in resultados:
                            datos_tabla.update({
                                'Exactitud': resultados['accuracy'],
                                'Precisi√≥n': resultados['precision'],
                                'Recall': resultados['recall'],
                                'F1-Score': resultados['f1_score']
                            })
                        elif 'r2' in resultados:
                            datos_tabla.update({
                                'R¬≤': resultados['r2'],
                                'MSE': resultados['mse'],
                                'RMSE': resultados['rmse'],
                                'MAE': resultados['mae']
                            })
                        
                        pdf.tabla_metricas("M√©tricas del √Årbol", datos_tabla)
                    
                    # Importancia de variables
                    if 'feature_importances' in resultados:
                        pdf.subtitulo("Importancia de Variables")
                        importancias = resultados['feature_importances']
                        importancias_ordenadas = sorted(importancias.items(), key=lambda x: x[1], reverse=True)
                        
                        for i, (variable, importancia) in enumerate(importancias_ordenadas[:5]):  # Top 5
                            pdf.texto_normal(f"{i+1}. {variable}: {importancia:.4f}")
            
            # Recomendaciones generales
            if incluir_recomendaciones:
                pdf.add_page()
                pdf.titulo_seccion("RECOMENDACIONES Y CONCLUSIONES")
                
                recomendaciones = generar_recomendaciones(resultados_modelos)
                for recomendacion in recomendaciones:
                    pdf.texto_normal(f"‚Ä¢ {recomendacion}")
            
            # Guardar PDF en memoria
            pdf_output = io.BytesIO()
            pdf_content = pdf.output(dest='S').encode('latin-1')
            pdf_output.write(pdf_content)
            pdf_output.seek(0)
            
            # Bot√≥n de descarga
            st.success("‚úÖ Reporte PDF generado exitosamente")
            
            # Crear nombre de archivo √∫nico
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            nombre_archivo = f"reporte_ml_{nombre_usuario.replace(' ', '_')}_{timestamp}.pdf"
            
            st.download_button(
                label="üì• Descargar Reporte PDF",
                data=pdf_output.getvalue(),
                file_name=nombre_archivo,
                mime="application/pdf",
                type="primary"
            )
            
            # Mostrar vista previa
            with st.expander("üëÅÔ∏è Vista Previa del Reporte"):
                st.info(f"üìÑ Archivo: {nombre_archivo}")
                st.info(f"üìä P√°ginas aproximadas: {pdf.page_no()}")
                st.info(f"üîç Modelos incluidos: {', '.join(resultados_modelos.keys())}")
                
        except Exception as e:
            st.error(f"‚ùå Error al generar el reporte PDF: {str(e)}")
            st.info("üí° Aseg√∫rate de haber ejecutado algunos modelos antes de generar el reporte")

def generar_interpretacion_regresion(r2):
    """Generar interpretaci√≥n para modelos de regresi√≥n"""
    if r2 >= 0.9:
        return "El modelo muestra un excelente ajuste a los datos, explicando m√°s del 90% de la variabilidad."
    elif r2 >= 0.7:
        return "El modelo presenta un buen ajuste, explicando una proporci√≥n significativa de la variabilidad."
    elif r2 >= 0.5:
        return "El modelo muestra un ajuste moderado. Se recomienda explorar mejoras en las caracter√≠sticas."
    else:
        return "El modelo presenta un ajuste pobre. Se recomienda revisar las caracter√≠sticas utilizadas o el tipo de modelo."

def generar_interpretacion_clasificacion(accuracy):
    """Generar interpretaci√≥n para modelos de clasificaci√≥n"""
    if accuracy >= 0.9:
        return "El modelo presenta un rendimiento excelente con alta exactitud en las predicciones."
    elif accuracy >= 0.8:
        return "El modelo muestra un buen rendimiento general para las tareas de clasificaci√≥n."
    elif accuracy >= 0.7:
        return "El modelo presenta un rendimiento moderado. Considere ajustar hiperpar√°metros o caracter√≠sticas."
    else:
        return "El modelo necesita mejoras significativas. Revise los datos y la selecci√≥n de caracter√≠sticas."

def generar_recomendaciones(resultados_modelos):
    """Generar recomendaciones basadas en todos los resultados"""
    recomendaciones = []
    
    # Recomendaciones por tipo de modelo
    if 'regresion' in resultados_modelos:
        mejor_r2 = max([m['r2'] for m in resultados_modelos['regresion'].values()])
        if mejor_r2 < 0.7:
            recomendaciones.append("Considere recopilar m√°s caracter√≠sticas relevantes para mejorar el rendimiento de los modelos de regresi√≥n.")
        else:
            recomendaciones.append("Los modelos de regresi√≥n muestran buen rendimiento. Considere validaci√≥n cruzada para confirmar la estabilidad.")
    
    if 'logistica' in resultados_modelos:
        accuracy = resultados_modelos['logistica']['accuracy']
        if accuracy < 0.8:
            recomendaciones.append("El modelo log√≠stico podr√≠a beneficiarse de ingenier√≠a de caracter√≠sticas adicional o ajuste de hiperpar√°metros.")
        else:
            recomendaciones.append("El modelo log√≠stico muestra buen rendimiento. Considere evaluarlo en datos de validaci√≥n independientes.")
    
    if any('arbol' in k for k in resultados_modelos.keys()):
        recomendaciones.append("Los √°rboles de decisi√≥n proporcionan interpretabilidad. Use la importancia de caracter√≠sticas para entender qu√© variables son m√°s relevantes.")
    
    # Recomendaciones generales
    recomendaciones.extend([
        "Realice validaci√≥n cruzada para evaluar la estabilidad de los modelos.",
        "Considere t√©cnicas de ensemble para mejorar el rendimiento predictivo.",
        "Monitoree el rendimiento del modelo en producci√≥n y reentrenelo peri√≥dicamente.",
        "Documente las decisiones tomadas durante el desarrollo del modelo para reproducibilidad."
    ])
    
    return recomendaciones
